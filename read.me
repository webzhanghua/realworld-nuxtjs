#### 登录说明


在根目录创建store文件夹（服务端使用vuex固定格式）
创建store/index.js，
通过this.$store.commit方法，将登录状态更新到store中

##### 登录具体过程
1、客户端-存储登录状态，并更新store中登录状态的数据
2、客户端-将登录信息写入cookie
3、服务端-通过cookie获得登录信息，并更新store中登录状态的数据
nuxtServerInit是特殊的action方法，在服务端渲染期间自动调用



#### 处理页面访问权限
通过nuxt.js的路由中间件控制页面的访问权限；

1、创建中间件
在根目录创建middleware文件夹（固定格式）；
在middleware文件夹下，创建js文件，js文件名即是中间件的名称（authen.js）；
～～～
export default function ({ store, redirect }) {
  if (!store.state.user) {
    return redirect('/login')
  }
}
～～～

2、应用中间件
找到要控制的页面组件，在根对象上创建middleware属性，属性值为中间件名称(应用单个中间件为字符类型，多个为数组类型);
~~~
export default {
  middleware: "authenticated",
  name: "EditorIndex"
};
export default {
  middleware: ["authenticated", "root"],
  name: "EditorIndex"
};
~~~

3、watchQuery,监听路由信息中query对象中的page属性，当发生变化时，重新加载asyncData
～～～
export default {
  async asyncData({ query }) {
    console.log('query: ', query.page);
    return {
    };
  },
  // 方式一
  watchQuery: ["page"],
  // 方式二
  watchQuery(newQuery, oldQuery) {
    return newQuery.foo && oldQuery.bar
  }
}
～～～

4、nuxt-link地址的完全匹配
～～～
<nuxt-link 
    class="nav-link"
    exact
    :to="{
        name: 'home',
        query: {
              tab: 'global_feed'
              }
        }"
>Global Feed</nuxt-link>
～～～

5、对异步请求进行拦截，添加token信息
5.1 token信息存放在store.state.user.token中，前后端都可以得到，封装在utils/request.js中的request方法无法拿到这个数据；
5.2 nuxt提供插件的方式，在插件中提供content上下文对象中可以获取到store.state.user.token；
5.3 在nuxt插件中，对异步请求进行拦截，添加token

创建插件，plugins/request.js
～～～
import axios from "axios";
export const request = axios.create({
  baseURL: 'https://api.realworld.io/'
})
export default (content) => {
  // content 插件中的上下文对象
  const store = content.store
  // 请求拦截器
  request.interceptors.request.use(config => {
    const { user } = store.state
    if (user && user.token) {
      config.headers.Authorization = `Token ${user.token}`
    }
    return config
  },
    err => {
      return Promise.reject(err)
    })

  // 响应拦截器
}
～～～

在nuxt.config.js中配置使用插件
～～～
module.exports = {
  plugins: ['~/plugins/request.js']
}
～～～

6、使用dayjs创建时间过滤器，对时间数据进行格式化
创建plugins/day.js插件文件，创建创建时间过滤器
～～～
import Vue from 'vue'
import dayjs from 'dayjs'

Vue.filter('date', (val, format = 'YYYY-MM-DD') => {
  return dayjs(val).format(format)
})
～～～